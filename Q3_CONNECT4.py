# -*- coding: utf-8 -*-
"""Q3_CONNECT4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KjQ91S2RLQH4vIm0KFSqPWN0F1wOrASM
"""

print('''                                                  CONNECT 4 - TWO PLAYER GAME                                                ''')
import numpy as np
Row_count = 7
Column_count = 7   # Rows and columns can adjusted as wanted by storing in a variable
def create_board():                        #creates board format
	board = np.zeros((Row_count, Column_count))
	return board

def player_piece(board, row, col, sym):      #defined to choose player piece
	board[row][col-1] = sym

def empty_space(board, col):               # defined to know if spot in topmost row is empty
	return board[Row_count - 1][col-1] == 0

def open_spot(board, col):                 # defined to know unfilled spot
	for r in range(Row_count):
		if board[r][col-1] == 0:
			return r

def win_combination(board, sym):
	# Checking horizontal  spots to win
	for c in range(Column_count - 3):
		for r in range(Row_count):
			if board[r][c] == sym and board[r][c + 1] == sym and board[r][c + 2] == sym and board[r][c + 3] == sym:
				return True

	# Checking vertical spots to win
	for c in range(Column_count):
		for r in range(Row_count - 3):
			if board[r][c] == sym and board[r + 1][c] == sym and board[r + 2][c] == sym and board[r + 3][c] == sym:
				return True

	# Checking diaganol type 1
	for c in range(Column_count - 3):
		for r in range(Row_count - 3):
			if board[r][c] == sym and board[r + 1][c + 1] == sym and board[r + 2][c + 2] == sym and board[r + 3][c + 3] == sym:
				return True

	# Checking diaganol type 2
	for c in range(Column_count - 3):
		for r in range(3, Row_count):
			if board[r][c] == sym and board[r - 1][c + 1] == sym and board[r - 2][c + 2] == sym and board[r - 3][c + 3] == sym:
				return True

def print_board(board):                  # defined to make bottommost row 0th row
	print(np.flip(board, 0))

board = create_board()
print_board(board)
game_over = False
turn = 0
while not game_over:
		#Asking Red Input
		if turn == 0:
			col = int(input("IT'S YOUR TURN RED(PLAYER1). CHOOSE A COLUMN: "))
			if empty_space(board, col):
				row = open_spot(board, col)
				player_piece(board, row, col, 1)

				if win_combination(board, 1):
					print("CONGRATULATIONS, RED!!! YOU WON THE GAME")
					game_over = True

		else:
			#Asking Yellow Input
			col = int(input("IT'S YOUR TURN YELLOW(PLAYER 2). CHOOSE A COLUMN: "))
			if empty_space(board, col):
				row = open_spot(board, col)
				player_piece(board, row, col, 2)

				if win_combination(board, 2):
					print("CONGRATULATIONS, YELLOW!!! YOU WON THE GAME")
					game_over = True

		print_board(board)
		turn = turn+1
		turn = turn %2      #interchanges turns of two players